# -*- coding: utf-8 -*-
"""Pair Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SddZdora_SMUNNvoJP3uBxoKeKRW_RJI
"""

import gradio as gr
import pandas as pd
from datetime import datetime
import plotly.express as px

# --- Custom CSS for specific styling ---
custom_css = """
#header { background-color: #4CAF50; padding: 20px; text-align: center; border-radius: 8px; margin-bottom: 20px; }
#header h1, #header h3 { color: white; margin: 0; }
#header h1 { font-size: 2.5em; }
#header h3 { font-size: 1.2em; font-weight: 300; }
#calculate_bmi_btn, #tdee_btn, #log_food_btn { background-color: #4CAF50 !important; }
"""

# --- Data & State Management ---
# Initialize with empty DataFrames
bmi_history_df = pd.DataFrame(columns=["Date", "BMI"])
food_log_df = pd.DataFrame(columns=["Food Item", "Calories", "Date"])
COMMON_FOODS = {
    "Apple (medium)": 95, "Banana (medium)": 105, "Chicken Breast (100g grilled)": 165,
    "Egg (large)": 78, "Mixed Green Salad (no dressing)": 15, "Brown Rice (1 cup cooked)": 215,
    "Whole Wheat Bread (1 slice)": 80, "Almonds (20 nuts)": 140,
}

# --- Tab 1: BMI Calculator Logic ---
def calculate_bmi(height, weight, unit_system, history_df):
    if not height or not weight or height <= 0 or weight <= 0:
        return None, "Please enter valid height and weight.", gr.HTML(""), history_df, None
    height_m = (height * 0.0254) if unit_system == "Imperial (in, lbs)" else (height / 100)
    weight_kg = (weight * 0.453592) if unit_system == "Imperial (in, lbs)" else weight
    bmi = weight_kg / (height_m ** 2)
    if bmi < 18.5: category, color = "Underweight", "lightblue"
    elif 18.5 <= bmi < 25: category, color = "Normal weight", "green"
    elif 25 <= bmi < 30: category, color = "Overweight", "orange"
    else: category, color = "Obesity", "red"
    visual_indicator = f"<div style='text-align: center; padding: 10px; border: 2px solid {color}; border-radius: 10px; background-color: {color}33;'><h3 style='color: {color}; margin:0;'>{category}</h3></div>"
    today = datetime.now().strftime("%Y-%m-%d")

    # Safely handle DataFrame updates to avoid FutureWarning
    new_history_df = history_df.copy()
    if today in new_history_df['Date'].values:
        new_history_df.loc[new_history_df['Date'] == today, 'BMI'] = round(bmi, 2)
    else:
        new_entry = pd.DataFrame([{"Date": today, "BMI": round(bmi, 2)}])
        new_history_df = pd.concat([new_history_df, new_entry], ignore_index=True)

    new_history_df['Date'] = pd.to_datetime(new_history_df['Date'])
    fig = px.line(new_history_df.sort_values(by="Date"), x='Date', y='BMI',
                  title='BMI Over Time', markers=True,
                  labels={'Date': 'Date', 'BMI': 'BMI Value'})
    return f"{bmi:.2f}", category, gr.HTML(visual_indicator), new_history_df, fig

def update_bmi_labels(unit_system):
    if unit_system == "Metric (cm, kg)":
        return gr.Number(label="Height (cm):", placeholder="e.g., 170"), gr.Number(label="Weight (kg):", placeholder="e.g., 70")
    else:
        return gr.Number(label="Height (in):", placeholder="e.g., 67"), gr.Number(label="Weight (lbs):", placeholder="e.g., 150")

# --- Tab 2: Metabolic Rate Logic ---
def calculate_tdee(age, gender, height_cm, weight_kg, activity_level):
    if any(x is None or x <= 0 for x in [age, height_cm, weight_kg]):
        return "Please enter valid age, height, and weight.", 0
    if gender == "Male":
        bmr = 88.362 + (13.397 * weight_kg) + (4.799 * height_cm) - (5.677 * age)
    else:
        bmr = 447.593 + (9.247 * weight_kg) + (3.098 * height_cm) - (4.330 * age)
    activity_factors = {
        "Sedentary": 1.2, "Lightly Active": 1.375, "Moderately Active": 1.55,
        "Very Active": 1.725, "Super Active": 1.9
    }
    tdee = round(bmr * activity_factors[activity_level])
    bmr = round(bmr)
    result_text = f"### Your Metabolic Rate:\n- **Basal Metabolic Rate (BMR):** `{bmr}` Calories/day\n\n---\n\n### Your Calorie Goals:\n- **Maintenance (TDEE):** **`{tdee}`** Calories/day\n- **Weight Loss (~0.5 kg/week):** `{tdee - 500}` Calories/day\n- **Weight Gain (~0.5 kg/week):** `{tdee + 500}` Calories/day"
    return result_text, tdee

# --- Tab 3: Food Tracker Logic ---
def log_food(food_dropdown, manual_food, manual_calories, log_df, tdee_value):
    food_name, calories = None, None

    # Prioritize manual input
    if manual_food and manual_food.strip() != "" and manual_calories is not None and manual_calories > 0:
        food_name = manual_food.strip()
        calories = manual_calories
    # If manual input is not valid, check common food dropdown
    elif food_dropdown and food_dropdown != "None":
        food_name = food_dropdown
        calories = COMMON_FOODS[food_dropdown]
    else: # No valid input, just return current state
        summary, comparison, plot = update_food_summary_and_plot(log_df, tdee_value)
        return log_df, summary, comparison, plot, None, "", None

    today = datetime.now().strftime("%Y-%m-%d")
    new_entry = pd.DataFrame([{"Food Item": food_name, "Calories": calories, "Date": today}])
    log_df = pd.concat([log_df, new_entry], ignore_index=True)
    summary, comparison, plot = update_food_summary_and_plot(log_df, tdee_value)
    # Return values to clear the input fields
    return log_df, summary, comparison, plot, None, "", None

def update_food_summary_and_plot(log_df, tdee_value):
    today = datetime.now().strftime("%Y-%m-%d")
    todays_log = log_df[log_df['Date'] == today]
    total_calories = todays_log['Calories'].sum()
    summary_text = f"**Total calories for today:** {total_calories} kcal"
    comparison_text = "Calculate TDEE in Tab 2 to set a daily target."
    if tdee_value > 0:
        diff = total_calories - tdee_value
        status = "OVER" if diff > 0 else "UNDER"
        comparison_text = f"You are **{abs(diff)} kcal {status}** your daily target of {tdee_value} kcal."

    fig = None
    if not log_df.empty:
        daily_calories = log_df.groupby('Date')['Calories'].sum().reset_index().tail(7)
        fig = px.line(daily_calories, x='Date', y='Calories', title='Daily Calorie Intake (Last 7 Days)', markers=True)
        if tdee_value > 0:
            fig.add_hline(y=tdee_value, line_dash="dot", annotation_text="TDEE Target", annotation_position="bottom right")
        fig.update_layout(xaxis_title="Date", yaxis_title="Calories", hovermode="x unified")
    return summary_text, comparison_text, fig

# --- Gradio App UI ---
with gr.Blocks(css=custom_css, theme=gr.themes.Default(primary_hue="green")) as app:
    # State variables to hold data between interactions
    bmi_history = gr.State(bmi_history_df)
    tdee_state = gr.State(0)
    food_log = gr.State(food_log_df)

    gr.HTML("<div id='header'><h1>üè• BME Health Calculator Suite</h1><h3>A comprehensive health tracking application</h3></div>")

    with gr.Tabs():
        # --- TAB 1: BMI Calculator ---
        with gr.TabItem("üìä BMI Calculator"):
            gr.Markdown("## Body Mass Index Calculator")
            unit_system = gr.Dropdown(["Metric (cm, kg)", "Imperial (in, lbs)"], label="Unit System", value="Metric (cm, kg)")
            with gr.Row():
                height_input = gr.Number(label="Height (cm):", placeholder="e.g., 170")
                weight_input = gr.Number(label="Weight (kg):", placeholder="e.g., 70")
            bmi_button = gr.Button("Calculate BMI", variant="primary", elem_id="calculate_bmi_btn")
            gr.Markdown("---")
            with gr.Row():
                with gr.Column(scale=1):
                    bmi_output_val = gr.Textbox(label="BMI Value", interactive=False)
                    bmi_category = gr.Textbox(label="Category", interactive=False)
                with gr.Column(scale=2):
                    bmi_visual = gr.HTML(label="Visual Indicator")
            gr.Markdown("### BMI Chart Visualization")
            bmi_plot_output = gr.Plot()

        # --- TAB 2: Metabolic Rate ---
        with gr.TabItem("üî• Metabolic Rate"):
            gr.Markdown("## Daily Metabolic Rate & Calorie Goal Calculator")
            gr.Markdown("Calculates your Basal Metabolic Rate (BMR) and Total Daily Energy Expenditure (TDEE). All inputs must be in metric units.")
            with gr.Row():
                age = gr.Number(label="Age", value=25, minimum=1)
                gender = gr.Radio(["Male", "Female"], label="Gender", value="Male") # FIXED
                activity_level = gr.Dropdown(
                    ["Sedentary", "Lightly Active", "Moderately Active", "Very Active", "Super Active"],
                    label="Activity Level", value="Moderately Active"
                )
            with gr.Row():
                height_tdee = gr.Number(label="Height (cm)", minimum=1)
                weight_tdee = gr.Number(label="Weight (kg)", minimum=1)
            tdee_btn = gr.Button("Calculate Metabolic Rate", variant="primary", elem_id="tdee_btn")
            gr.Markdown("---")
            tdee_output = gr.Markdown(label="Results")

        # --- TAB 3: Food Tracker ---
        with gr.TabItem("ü•ó Food & Calorie Tracker"):
            gr.Markdown("## Log Your Daily Food Intake")
            with gr.Row():
                with gr.Column(scale=2):
                    gr.Markdown("### Log from a Common Food")
                    food_dropdown = gr.Dropdown(choices=list(COMMON_FOODS.keys()), label="Select Food Item")
                    gr.Markdown("<p style='text-align: center; margin: 10px;'>OR</p>")
                    gr.Markdown("### Log Manually")
                    manual_food = gr.Textbox(label="Food Item Name", placeholder="e.g., Protein Shake")
                    manual_calories = gr.Number(label="Calories (kcal)", minimum=0)
                    log_food_btn = gr.Button("Log Food", variant="primary", elem_id="log_food_btn")
                with gr.Column(scale=3):
                    gr.Markdown("### Today's Summary")
                    summary_output = gr.Markdown()
                    comparison_output = gr.Markdown()
                    food_plot = gr.Plot()

    # --- Event Listener Wiring ---

    # BMI Tab Listeners
    unit_system.change(fn=update_bmi_labels, inputs=unit_system, outputs=[height_input, weight_input])
    bmi_button.click(
        fn=calculate_bmi,
        inputs=[height_input, weight_input, unit_system, bmi_history],
        outputs=[bmi_output_val, bmi_category, bmi_visual, bmi_history, bmi_plot_output]
    )

    # TDEE Tab Listeners
    tdee_btn.click(
        fn=calculate_tdee,
        inputs=[age, gender, height_tdee, weight_tdee, activity_level],
        outputs=[tdee_output, tdee_state]
    )

    # Food Tracker Listeners
    log_food_btn.click(
        fn=log_food,
        inputs=[food_dropdown, manual_food, manual_calories, food_log, tdee_state],
        outputs=[food_log, summary_output, comparison_output, food_plot, food_dropdown, manual_food, manual_calories]
    )

    # When TDEE is calculated, update the food summary automatically
    tdee_state.change(
        fn=update_food_summary_and_plot,
        inputs=[food_log, tdee_state],
        outputs=[summary_output, comparison_output, food_plot]
    )

app.launch(debug=True)